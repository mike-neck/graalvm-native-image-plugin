name: Run Gradle Tests

on:
  push:
    paths-ignore:
      - '.github/**'
      - 'example/**'
  workflow_dispatch: {}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v1
      
      - name: Set up Java
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '8'

      - name: Cache gradle
        id: gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: gradle-

      - name: Run Tests with Gradle
        run: ./gradlew clean spotlessCheck test --continue

      - name: Store reports
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: test-report
          path: build/reports/tests/test

  functionalTest:
    runs-on: ubuntu-18.04
    needs: test
    strategy:
      matrix:
        graal:
          - 20.3.0
          - 21.0.0
          - 21.1.0
        javaVersion:
          - java8
          - java11
          - java16
        nativeImage:
          - installed
          - "uninstalled"
        exclude:
          - graal: 20.3.0
            javaVersion: java8
          - graal: 20.3.0
            javaVersion: java16
          - graal: 21.0.0
            javaVersion: java16
    name: "test ${{ matrix.graal }}.${{ matrix.javaVersion }}(native-image: ${{ matrix.nativeImage }})"
    if: contains( github.ref , 'refs/heads/release' ) == false

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set up GraalVM
        uses: DeLaGuardo/setup-graalvm@8bbfe44ef9c6f5c07e5af036a1bffd561c037d18
        with:
          graalvm-version: "${{ matrix.graal }}.${{ matrix.javaVersion }}"

      - name: show gu command
        run: |
          which gu
          echo $JAVA_HOME

      - name: Install GraalVM native-image
        run: gu install native-image
        if: "startsWith(matrix.nativeImage, 'installed')"

      - name: Get latest gradle version if Java16
        if: "${{ 'java16' == matrix.javaVersion }}"
        id: latest-gradle
        run:  grep -A 1 " version:" ./.github/workflows/versions.yml | tail -n 1 | sed 's/[- :]//g' | tr -d '"' | awk '{print "::set-output name=version::" $1}'

      - name: Override gradle wrapper if Java16
        if: "${{ 'java16' == matrix.javaVersion }}"
        run: sed -i "s/[0-9]\.[0-9]\.[0-9]/${WRAPPER_VERSION}/g" gradle/wrapper/gradle-wrapper.properties
        env:
          WRAPPER_VERSION: "${{ steps.latest-gradle.outputs.version }}"

      - name: Override kotlin version if Java16
        if: "${{ 'java16' == matrix.javaVersion }}"
        run: sed -i -r "/org.jetbrains.kotlin.jvm/s/[0-9]+\.[0-9]+\.[0-9]+/${KOTLIN_VERSION_FOR_GRADLE_7}/g" ./build.gradle
        env:
          KOTLIN_VERSION_FOR_GRADLE_7: "1.5.31"

      - name: Override shadow plugin version if Java16
        if: "${{ 'java16' == matrix.javaVersion }}"
        run: sed -i -r "/com.github.johnrengelman.shadow/s/[0-9]+\.[0-9]+\.[0-9]+/${SHADOW_PLUGIN_VERSION_FOR_GRADLE_7}/g" ./build.gradle
        env:
          SHADOW_PLUGIN_VERSION_FOR_GRADLE_7: "7.1.0"

      - name: Show JAVA_HOME contents
        run: |
          echo "${JAVA_HOME}"
          ls -l "${JAVA_HOME}"
          if [[ -f "${JAVA_HOME}/release" ]]; then
            echo "release file contents"
            cat "${JAVA_HOME}/release"
          else
            echo "release does not exist"
          fi

      - name: Cache gradle wrapper
        id: gradle-wrapper
        uses: actions/cache@v2
        with: 
          path: ~/.gradle/wrapper
          key: wrapper-${{ hashFiles('**/gradle-wrapper.properties') }}
          restore-keys: wrapper-

      - name: Cache gradle
        id: gradle
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: gradle-

      - name: Build Cache
        id: build-cache
        uses: actions/cache@v2
        with:
          path: .cache
          key: build-${{ hashFiles('src/functionalTest/**/*.java') }}
          restore-keys: build-

      - name: Run functional test
        run: ./gradlew clean functionalTest

      - name: Store reports
        uses: actions/upload-artifact@v1
        if: always()
        with:
          name: test-report-${{ matrix.graal }}-${{ matrix.javaVersion }}-${{ matrix.nativeImage }}
          path: build/reports/tests/functionalTest
