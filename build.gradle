import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

plugins {
    id 'java-gradle-plugin'
    id "org.jetbrains.kotlin.jvm" version "1.4.0"
    id 'com.gradle.plugin-publish' version '0.12.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

ext {
    thisPluginVersion = project.hasProperty('pluginVersion')?
            project.property('pluginVersion'):
            'snapshot'


    junitJupiterVersion = '5.6.2'
}

group = 'org.mikeneck'
version = thisPluginVersion

repositories {
    jcenter()
}

sourceSets {
    functionalTest {

    }
}

configurations {
    jackson
}

dependencies {
    compileOnly 'org.jetbrains:annotations:20.0.0'
    jackson 'com.fasterxml.jackson.core:jackson-databind:2.11.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation configurations.jackson

    testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"
    testImplementation 'org.assertj:assertj-core:3.16.1'

    functionalTestImplementation 'org.assertj:assertj-core:3.16.1'
    functionalTestImplementation 'io.github.classgraph:classgraph:4.8.78'
}

jar.enabled = false

shadowJar {
    dependsOn 'classes'
    relocate 'com.fasterxml.jackson', 'org.mikeneck.com.fasterxml.jackson'
    configurations = [project.configurations.jackson]
    exclude('module-info.class')
    transform(new ServiceFileTransformer())
}

task replaceJar(type: Copy, dependsOn: ['jar', 'shadowJar'], group: 'build') {
    from shadowJar
    into "$buildDir/libs"
    rename {
        if ("$it".endsWith('-all.jar')) "$it".replace('-all.jar', ".jar")
        else null
    }
}

jar.finalizedBy(replaceJar)

gradlePlugin {
    plugins {
        graalvmNativeImage {
            id = 'org.mikeneck.graalvm-native-image'
            implementationClass = 'org.mikeneck.graalvm.GraalvmNativeImagePlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/mike-neck/graalvm-native-image-plugin'
    vcsUrl = 'https://github.com/mike-neck/graalvm-native-image-plugin'
    description = 'Generates native image via GraalVM'
    tags = ['graalvm', 'native-image']
    plugins {
        graalvmNativeImage {
            displayName = 'GraalVM Native Image Plugin'
        }
    }
}

if (!project.hasProperty('gradle.publish.key') || !project.hasProperty('gradle.publish.secret')) {
    tasks.publishPlugins.enabled(false)
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.withType(Test) {
    useJUnitPlatform()
}

tasks.compileFunctionalTestJava.dependsOn('pluginDescriptors')

check {
    dependsOn(tasks.functionalTest)
}

task showVersion {
    group = 'help'
    doLast {
        logger.lifecycle("project: ${project.name}")
        logger.lifecycle("group: ${project.group}")
        logger.lifecycle("version: ${project.version}")
        logger.lifecycle("artifact: ${tasks.jar.archiveFileName.orNull}")
        logger.lifecycle("can release plugin: ${tasks.publishPlugins.enabled}")
    }
}
